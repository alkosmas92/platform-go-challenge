// Code generated by MockGen. DO NOT EDIT.
// Source: repository/asset_repository.go

// Package mocksn is a generated GoMock package.
package mocksn

import (
	context "context"
	reflect "reflect"

	models "github.com/alkosmas92/platform-go-challenge/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAssetRepository is a mock of AssetRepository interface.
type MockAssetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAssetRepositoryMockRecorder
}

// MockAssetRepositoryMockRecorder is the mock recorder for MockAssetRepository.
type MockAssetRepositoryMockRecorder struct {
	mock *MockAssetRepository
}

// NewMockAssetRepository creates a new mock instance.
func NewMockAssetRepository(ctrl *gomock.Controller) *MockAssetRepository {
	mock := &MockAssetRepository{ctrl: ctrl}
	mock.recorder = &MockAssetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssetRepository) EXPECT() *MockAssetRepositoryMockRecorder {
	return m.recorder
}

// CreateAsset mocks base method.
func (m *MockAssetRepository) CreateAsset(ctx context.Context, asset *models.Asset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAsset", ctx, asset)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAsset indicates an expected call of CreateAsset.
func (mr *MockAssetRepositoryMockRecorder) CreateAsset(ctx, asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsset", reflect.TypeOf((*MockAssetRepository)(nil).CreateAsset), ctx, asset)
}

// DeleteAssetByID mocks base method.
func (m *MockAssetRepository) DeleteAssetByID(ctx context.Context, assetID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssetByID", ctx, assetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAssetByID indicates an expected call of DeleteAssetByID.
func (mr *MockAssetRepositoryMockRecorder) DeleteAssetByID(ctx, assetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetByID", reflect.TypeOf((*MockAssetRepository)(nil).DeleteAssetByID), ctx, assetID)
}

// GetAssetByID mocks base method.
func (m *MockAssetRepository) GetAssetByID(ctx context.Context, assetID string) (*models.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetByID", ctx, assetID)
	ret0, _ := ret[0].(*models.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetByID indicates an expected call of GetAssetByID.
func (mr *MockAssetRepositoryMockRecorder) GetAssetByID(ctx, assetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetByID", reflect.TypeOf((*MockAssetRepository)(nil).GetAssetByID), ctx, assetID)
}

// UpdateAssetByID mocks base method.
func (m *MockAssetRepository) UpdateAssetByID(ctx context.Context, id string, asset *models.Asset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssetByID", ctx, id, asset)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAssetByID indicates an expected call of UpdateAssetByID.
func (mr *MockAssetRepositoryMockRecorder) UpdateAssetByID(ctx, id, asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetByID", reflect.TypeOf((*MockAssetRepository)(nil).UpdateAssetByID), ctx, id, asset)
}
